package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.41

import (
	"context"
	"fmt"

	"github.com/enisdenjo/go-gqlhive/internal/fixtures/todos/graph/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	var userByID *model.User
	for _, user := range users {
		if user.ID == input.UserID {
			userByID = user
			break
		}
	}
	if userByID == nil {
		return nil, fmt.Errorf("user with id %q does not exist", input.UserID)
	}
	newTodo := &model.Todo{
		ID:   fmt.Sprintf("t%d", len(todos)),
		Text: input.Text,
		Done: false,
		User: userByID,
	}
	todos = append(todos, newTodo)
	return newTodo, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context, condition *model.TodosCondition, sortBy *model.TodosSortBy) ([]*model.Todo, error) {
	return todos, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
