// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

type Mutation struct {
}

type NewTodo struct {
	Text   string `json:"text"`
	UserID string `json:"userId"`
}

type Query struct {
}

type Todo struct {
	ID   string `json:"id"`
	Text string `json:"text"`
	Done bool   `json:"done"`
	User *User  `json:"user"`
}

type TodosCondition struct {
	SearchText *string                   `json:"searchText,omitempty"`
	Statuses   []TodosConditionStatus    `json:"statuses,omitempty"`
	UserStatus *TodosConditionUserStatus `json:"userStatus,omitempty"`
	User       *TodosConditionUser       `json:"user,omitempty"`
}

type TodosConditionUser struct {
	Name *string `json:"name,omitempty"`
}

type User struct {
	ID    string  `json:"id"`
	Name  string  `json:"name"`
	Todos []*Todo `json:"todos"`
}

type TodosConditionStatus string

const (
	TodosConditionStatusDone     TodosConditionStatus = "DONE"
	TodosConditionStatusAssigned TodosConditionStatus = "ASSIGNED"
)

var AllTodosConditionStatus = []TodosConditionStatus{
	TodosConditionStatusDone,
	TodosConditionStatusAssigned,
}

func (e TodosConditionStatus) IsValid() bool {
	switch e {
	case TodosConditionStatusDone, TodosConditionStatusAssigned:
		return true
	}
	return false
}

func (e TodosConditionStatus) String() string {
	return string(e)
}

func (e *TodosConditionStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TodosConditionStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TodosConditionStatus", str)
	}
	return nil
}

func (e TodosConditionStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *TodosConditionStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e TodosConditionStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type TodosConditionUserStatus string

const (
	TodosConditionUserStatusAvailable   TodosConditionUserStatus = "AVAILABLE"
	TodosConditionUserStatusUnavailable TodosConditionUserStatus = "UNAVAILABLE"
)

var AllTodosConditionUserStatus = []TodosConditionUserStatus{
	TodosConditionUserStatusAvailable,
	TodosConditionUserStatusUnavailable,
}

func (e TodosConditionUserStatus) IsValid() bool {
	switch e {
	case TodosConditionUserStatusAvailable, TodosConditionUserStatusUnavailable:
		return true
	}
	return false
}

func (e TodosConditionUserStatus) String() string {
	return string(e)
}

func (e *TodosConditionUserStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TodosConditionUserStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TodosConditionUserStatus", str)
	}
	return nil
}

func (e TodosConditionUserStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *TodosConditionUserStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e TodosConditionUserStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type TodosSortBy string

const (
	TodosSortByNameAsc  TodosSortBy = "NAME_ASC"
	TodosSortByNameDesc TodosSortBy = "NAME_DESC"
)

var AllTodosSortBy = []TodosSortBy{
	TodosSortByNameAsc,
	TodosSortByNameDesc,
}

func (e TodosSortBy) IsValid() bool {
	switch e {
	case TodosSortByNameAsc, TodosSortByNameDesc:
		return true
	}
	return false
}

func (e TodosSortBy) String() string {
	return string(e)
}

func (e *TodosSortBy) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TodosSortBy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TodosSortBy", str)
	}
	return nil
}

func (e TodosSortBy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *TodosSortBy) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e TodosSortBy) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
